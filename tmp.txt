#[allow(unused_macros)]
macro_rules! read_i {
    ( $($args:expr ; $t:ty),* ) => {{
        let line = read_string();
        let mut line = line.split_whitespace();
        $(
            let tmp:$t = line.next().unwrap().parse().unwrap();
            *$args = tmp;
        )*
    }};
}
pub fn read_string() -> String{
    let mut buf = String::new();
    std::io::stdin().read_line(&mut buf).unwrap();
    buf.trim().to_owned().to_string()
}
pub fn read_vec_i(n:usize) -> Vec<i32> {
    let mut v:Vec<i32> = Vec::new();
    let line = read_string();
    let mut line = line.split_whitespace();
    for _i in 0..n {
        let x = line.next().unwrap().parse().unwrap();
        v.push(x);
    }
    v
}
pub fn read_vec2_i(n:usize, m:usize) -> Vec<Vec<i32>> {
    let mut v:Vec<Vec<i32>> = Vec::new();
    for i in 0..n {
        let v1:Vec<i32> = Vec::new();
        v.push(v1);
        let line = read_string();
        println!("> {}", line);
        let mut line = line.split_whitespace();
        for _j in 0..m {
            let x = line.next().unwrap().parse().unwrap();
            v[i].push(x);
        }
    }
    v
}